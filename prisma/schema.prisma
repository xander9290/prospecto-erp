generator client {
  provider = "prisma-client-js"
  output   = "../generate/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Partner {
  id             String  @id @default(cuid())
  // Datos personales
  name           String
  displayName    String  @unique @map("display_name")
  email          String?
  phone          String?
  street         String?
  crosseStreets  String? @map("crosse_streets")
  colony         String?
  completeAdress String? @map("complete_address")

  // Propiedades de model
  state    String?
  imageUrl String? @map("image_url")

  // Relaciones
  User User?

  // Relación con el agente asignado
  userId String? @map("user_id")
  SUser  User?   @relation("SaleUser", fields: [userId], references: [id])

  // Usuario de sesión
  createdById String? @map("created_by")
  CUser       User?   @relation("Creator", fields: [createdById], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([name, displayName, phone])
  @@map("partners")
}

model User {
  id              String    @id @default(cuid())
  state           String    @default("no_active")
  password        String
  lastLogin       DateTime? @map("last_login")
  partnerId       String    @unique @default("") @map("partner_id")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  userName        String    @unique @map("user_name")
  displayName     String    @unique @map("display_name")
  email           String    @unique
  Partner         Partner   @relation(fields: [partnerId], references: [id])
  darkMode        Boolean   @default(false) @map("dark_mode")
  Partners        Partner[] @relation("SaleUser")
  CreatedPartners Partner[] @relation("Creator")

  createdById String? @map("created_by")
  CUser       User?   @relation("CreatorUid", fields: [createdById], references: [id])
  Users       User[]  @relation("CreatorUid")

  @@index([displayName, email, userName])
  @@map("users")
}

model Image {
  id         String   @id @default(cuid())
  url        String
  publicId   String   @map("public_id")
  entityType String
  entityId   String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("images")
}

model Request {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  accepted  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("requests")
}

model Counter {
  id    String @id
  value Int

  @@map("counters")
}
